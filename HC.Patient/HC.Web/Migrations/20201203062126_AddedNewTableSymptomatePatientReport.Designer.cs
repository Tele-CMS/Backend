// <auto-generated />
using HC.Patient.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HC.Patient.Web.Migrations
{
    [DbContext(typeof(HCOrganizationContext))]
    [Migration("20201203062126_AddedNewTableSymptomatePatientReport")]
    partial class AddedNewTableSymptomatePatientReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HC.Patient.Entity.ActionPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ActionId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModuleId");

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("Permission");

                    b.Property<int>("RoleId");

                    b.Property<int>("ScreenId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScreenId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ActionPermissions");
                });

            modelBuilder.Entity("HC.Patient.Entity.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ActionKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ActionName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<int>("ScreenId");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ConfigType");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Key");

                    b.Property<string>("Label");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppConfigurations");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AppointmentId");

                    b.Property<int>("AuthProcedureCPTLinkId");

                    b.Property<DateTime>("AuthScheduledDate");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceCodeId");

                    b.Property<int>("UnitsBlocked");

                    b.Property<int?>("UnitsConsumed");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AuthProcedureCPTLinkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppointmentAuthorization");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentPaymentRefund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PaymentToken")
                        .IsRequired();

                    b.Property<string>("RefundToken")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppointmentPaymentRefund");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentPayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentId");

                    b.Property<decimal>("BookingAmount");

                    b.Property<decimal>("CommissionPercentage");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PaymentMode")
                        .IsRequired();

                    b.Property<string>("PaymentToken")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppointmentPayments");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PatientAppointmentID");

                    b.Property<int>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientAppointmentID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppointmentStaff");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppointmentTypeID");

                    b.Property<bool?>("AllowMultipleStaff");

                    b.Property<string>("Color")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DefaultDuration")
                        .HasMaxLength(200);

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("FontColor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("#ffffff")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBillAble");

                    b.Property<bool?>("IsClientRequired");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppointmentType");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AuditLogTableId");

                    b.Property<string>("ColumnName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Query")
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogTableId");

                    b.ToTable("AuditLogColumn");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool?>("AccessedToDelete");

                    b.Property<string>("Action")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("AuditLogColumnId");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("EncryptionCode")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("LocationID");

                    b.Property<string>("LoginAttempt")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("ParentInfo")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PatientId");

                    b.Property<string>("ScreenName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogColumnId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("TableName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationID");

                    b.ToTable("AuditLogTable");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthenticationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthenticationTokenID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(500);

                    b.Property<string>("Token")
                        .HasMaxLength(500);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuthenticationToken");
                });

            modelBuilder.Entity("HC.Patient.Entity.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthorizationId");

                    b.Property<string>("AuthorizationNumber")
                        .HasMaxLength(200);

                    b.Property<string>("AuthorizationTitle")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerified");

                    b.Property<string>("Notes");

                    b.Property<int>("OrganizationID");

                    b.Property<int>("PatientID");

                    b.Property<int>("PatientInsuranceId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthorizationProcedures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthorizationProcedureId");

                    b.Property<int>("AuthorizationId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerified");

                    b.Property<int>("TypeID");

                    b.Property<int>("Unit");

                    b.Property<int?>("UnitConsumed");

                    b.Property<int?>("UnitRemain");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TypeID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuthorizationProcedures");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthProcedureCPT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthProcedureCPTLinkId");

                    b.Property<int>("AuthorizationProceduresId");

                    b.Property<int?>("BlockedUnit");

                    b.Property<int>("CPTID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("UnitConsumed");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationProceduresId");

                    b.HasIndex("CPTID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuthProcedureCPT");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthProcedureCPTModifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuthProcedureCPTModifierLinkId");

                    b.Property<int>("AuthProcedureCPTLinkId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Modifier")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthProcedureCPTLinkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuthProcedureCPTModifiers");
                });

            modelBuilder.Entity("HC.Patient.Entity.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("ChatDate");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<int>("FromUserId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSeen");

                    b.Property<string>("Message");

                    b.Property<int?>("MessageType");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("RoomId");

                    b.Property<int?>("ToUserId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("ToUserId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatConnectedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ConnectionId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ChatConnectedUser");
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("RoomName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatRoomUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RoomId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomUsers");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreditDebitFlagCode")
                        .HasColumnType("char(1)");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EDIReferenceNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileText")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("MonetoryAmount");

                    b.Property<string>("PaymentFormatCode")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("ProductionDate");

                    b.Property<string>("ReceiverAccountNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReceiverAccountNumberQualifier")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ReceiverDFINumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReceiverDFIType")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderAccountNumberQualifier")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SenderDFINumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderDFIType")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("TransactionHandlingCode")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim835Batch");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("AmountApproved");

                    b.Property<decimal>("AmountClaimed");

                    b.Property<bool>("Applied");

                    b.Property<int>("Claim835BatchId");

                    b.Property<int>("Claim837ClaimId");

                    b.Property<string>("ClaimFillingIndicatorCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ClaimStatusCode")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("PatientResponsibilityAmount");

                    b.Property<string>("PayerClaimControlNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim835BatchId");

                    b.HasIndex("Claim837ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim835Claims");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835ServiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("AmountApproved");

                    b.Property<decimal>("AmountCharged");

                    b.Property<bool>("Applied");

                    b.Property<int>("Claim835ClaimId");

                    b.Property<int>("Claim837ServiceLineId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ServiceCode");

                    b.Property<decimal>("UnitApproved");

                    b.Property<decimal>("UnitCharged");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim835ClaimId");

                    b.HasIndex("Claim837ServiceLineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim835ServiceLine");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835ServiceLineAdjustmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AdjustmentGroupCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AdjustmentReasonCode")
                        .HasColumnType("varchar(5)");

                    b.Property<decimal>("AmountAdjusted");

                    b.Property<bool>("Applied");

                    b.Property<int>("Claim835ServiceLineId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("UnitApproved");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim835ServiceLineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim835ServiceLineAdjustmentDetail");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EDIFileText")
                        .HasColumnType("text");

                    b.Property<int>("EDIGatewayId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NoOfClaims");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime>("SentDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EDIGatewayId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim837Batch");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("Claim837BatchId");

                    b.Property<int>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientInsuranceId");

                    b.Property<int>("PayerPreference");

                    b.Property<int?>("SubmissionType");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim837BatchId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("PayerPreference");

                    b.HasIndex("SubmissionType");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim837Claims");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837ServiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizationNumber");

                    b.Property<int>("Claim837ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modifier1");

                    b.Property<string>("Modifier2");

                    b.Property<string>("Modifier3");

                    b.Property<string>("Modifier4");

                    b.Property<int?>("Pointer1");

                    b.Property<int?>("Pointer2");

                    b.Property<int?>("Pointer3");

                    b.Property<int?>("Pointer4");

                    b.Property<decimal>("Rate");

                    b.Property<int>("ServiceLineId");

                    b.Property<int>("Units");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim837ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ServiceLineId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claim837ServiceLine");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimDiagnosisCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("ICDCode");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimDiagnosisCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimEncounters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ClaimId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientEncounterId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimEncounters");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClaimId");

                    b.Property<string>("ColumnName")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimHistory");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ClaimId");

                    b.Property<int?>("ClinicianId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RenderingProviderId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RenderingProviderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimProviders");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimResubmissionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ResubmissionCode")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("ResubmissionReason")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimResubmissionReason");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AdditionalClaimInfo")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ClaimPaymentStatusId");

                    b.Property<DateTime?>("ClaimSettledDate");

                    b.Property<int>("ClaimStatusId");

                    b.Property<int>("ClinicianId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CustomAddress")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CustomAddressID");

                    b.Property<DateTime>("DOS");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OfficeAddressID");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("PatientAddressID");

                    b.Property<int>("PatientId");

                    b.Property<int>("PatientInsuranceId");

                    b.Property<int>("RenderingProviderId");

                    b.Property<int>("ServiceLocationID");

                    b.Property<int?>("SubmissionType");

                    b.Property<DateTime?>("SubmittedDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClaimPaymentStatusId");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomAddressID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OfficeAddressID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientAddressID");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("RenderingProviderId");

                    b.HasIndex("ServiceLocationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimServiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AuthProcedureCPTLinkId");

                    b.Property<string>("AuthorizationNumber");

                    b.Property<int>("ClaimId");

                    b.Property<int?>("ClinicianId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CustomAddress")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CustomAddressID");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DiagnosisCodePointer1");

                    b.Property<int?>("DiagnosisCodePointer2");

                    b.Property<int?>("DiagnosisCodePointer3");

                    b.Property<int?>("DiagnosisCodePointer4");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBillable");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsPatientResponsible");

                    b.Property<string>("Modifier1")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Modifier2")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Modifier3")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Modifier4")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("OfficeAddressID");

                    b.Property<int?>("PatientAddressID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Rate");

                    b.Property<decimal?>("RateModifier1");

                    b.Property<decimal?>("RateModifier2");

                    b.Property<decimal?>("RateModifier3");

                    b.Property<decimal?>("RateModifier4");

                    b.Property<int?>("RenderingProviderId");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("TotalAmount");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthProcedureCPTLinkId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomAddressID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DiagnosisCodePointer1");

                    b.HasIndex("DiagnosisCodePointer2");

                    b.HasIndex("DiagnosisCodePointer3");

                    b.HasIndex("DiagnosisCodePointer4");

                    b.HasIndex("OfficeAddressID");

                    b.HasIndex("PatientAddressID");

                    b.HasIndex("RenderingProviderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimServiceLine");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimServiceLinePaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AdjustmentGroupCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AdjustmentReasonCode")
                        .HasColumnType("varchar(6)");

                    b.Property<decimal>("Amount");

                    b.Property<int?>("Claim835ServiceLineId");

                    b.Property<string>("ClaimFillingIndicatorCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ClaimStatusCode")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CreditDebitFlagCode")
                        .HasColumnType("char(1)");

                    b.Property<string>("CustomReferenceNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("DescriptionType");

                    b.Property<string>("EDIReferenceNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("GuarantorId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<int?>("PatientId");

                    b.Property<int?>("PatientInsuranceId");

                    b.Property<string>("PayerClaimControlNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaymentCheckDetailId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentFormatCode")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("varchar(3)");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("ReceiverAccountNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReceiverAccountNumberQualifier")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ReceiverDFINumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReceiverDFIType")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ResponseProductionDate");

                    b.Property<string>("SenderAccountNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderAccountNumberQualifier")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SenderDFINumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderDFIType")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("ServiceLineId");

                    b.Property<string>("TransactionHandlingCode")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim835ServiceLineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DescriptionType");

                    b.HasIndex("GuarantorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("PaymentCheckDetailId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ServiceLineId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimServiceLinePaymentDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("CategoryName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_Category");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_CategoryCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CodeName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal>("Score");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_CategoryCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("DocumentName");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_Document");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_DocumentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AnswerId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("DocumentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PatientID");

                    b.Property<int>("SectionItemId");

                    b.Property<string>("TextAnswer");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PatientID");

                    b.HasIndex("SectionItemId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_DocumentAnswer");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_PatientDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AssignedBy");

                    b.Property<byte[]>("ClinicianSign");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("DocumentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int>("PatientId");

                    b.Property<byte[]>("PatientSign");

                    b.Property<int>("Status");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_PatientDocuments");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<int>("DocumentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("SectionName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_Section");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_SectionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ItemLabel");

                    b.Property<int>("Itemtype");

                    b.Property<int>("SectionId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Itemtype");

                    b.HasIndex("SectionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DFA_SectionItem");
                });

            modelBuilder.Entity("HC.Patient.Entity.EDI999AcknowledgementMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("Claim837BatchId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EDIFileText")
                        .HasColumnType("text");

                    b.Property<int?>("EligibilityEnquiry270MasterId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("ResponseType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Claim837BatchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EligibilityEnquiry270MasterId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EDI999AcknowledgementMaster");
                });

            modelBuilder.Entity("HC.Patient.Entity.EDIGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EDIGatewayID");

                    b.Property<string>("ClearingHouseName")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FTPPassword")
                        .HasMaxLength(200);

                    b.Property<string>("FTPURL")
                        .HasMaxLength(200);

                    b.Property<string>("FTPUsername")
                        .HasMaxLength(200);

                    b.Property<string>("InterchangeQualifier")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Path270")
                        .HasMaxLength(100);

                    b.Property<string>("Path271")
                        .HasMaxLength(100);

                    b.Property<string>("Path276")
                        .HasMaxLength(100);

                    b.Property<string>("Path277")
                        .HasMaxLength(100);

                    b.Property<string>("Path835")
                        .HasMaxLength(100);

                    b.Property<string>("Path837")
                        .HasMaxLength(100);

                    b.Property<string>("Path999")
                        .HasMaxLength(100);

                    b.Property<string>("PortNo")
                        .HasMaxLength(10);

                    b.Property<string>("ReceiverID")
                        .HasMaxLength(60);

                    b.Property<string>("SenderID")
                        .HasMaxLength(60);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EDIGateway");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EDIText")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("PatientId");

                    b.Property<int>("PatientInsuranceId");

                    b.Property<int>("StatusId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EligibilityEnquiry270Master");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270ServiceCodesDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("EligibilityEnquiry270MasterId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceCodeId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EligibilityEnquiry270MasterId");

                    b.HasIndex("ServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EligibilityEnquiry270ServiceCodesDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270ServiceTypeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("EligibilityEnquiry270MasterId");

                    b.Property<int>("EligibilityEnquiryServiceTypeMasterId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EligibilityEnquiry270MasterId");

                    b.HasIndex("EligibilityEnquiryServiceTypeMasterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EligibilityEnquiry270ServiceTypeDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiryServiceTypeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("ServiceTypeCode")
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EligibilityEnquiryServiceTypeMaster");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("EmailStatus");

                    b.Property<int>("EmailSubType");

                    b.Property<int>("EmailType");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PrimaryId");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(200);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("EmailTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Template");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModuleTypeId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Subject");

                    b.Property<string>("Template");

                    b.Property<string>("TemplateName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModuleTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("HC.Patient.Entity.EncounterSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<byte[]>("ClinicianSign");

                    b.Property<DateTime?>("ClinicianSignDate");

                    b.Property<string>("GuardianName");

                    b.Property<byte[]>("GuardianSign");

                    b.Property<DateTime?>("GuardianSignDate");

                    b.Property<int>("PatientEncounterId");

                    b.Property<int?>("PatientId");

                    b.Property<byte[]>("PatientSign");

                    b.Property<DateTime?>("PatientSignDate");

                    b.Property<int?>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("EncounterSignature");
                });

            modelBuilder.Entity("HC.Patient.Entity.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Data");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("HC.Patient.Entity.GlobalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GlobalCodeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<int>("GlobalCodeCategoryID");

                    b.Property<string>("GlobalCodeName");

                    b.Property<string>("GlobalCodeValue");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GlobalCodeCategoryID");

                    b.HasIndex("OrganizationID")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GlobalCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.GlobalCodeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GlobalCodeCategoryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("GlobalCodeCategoryName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GlobalCodeCategory");
                });

            modelBuilder.Entity("HC.Patient.Entity.GroupSessionInvitations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppointmentId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<Guid?>("InvitaionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("InvitedAppointmentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("SessionId");

                    b.Property<string>("SessionMode");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InvitedAppointmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("GroupSessionInvitations");
                });

            modelBuilder.Entity("HC.Patient.Entity.HealthcareKeywords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CareCategoryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KeywordName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CareCategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("HealthcareKeywords");
                });

            modelBuilder.Entity("HC.Patient.Entity.Holidays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("HC.Patient.Entity.InsuranceCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AdditionalClaimInfo")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<string>("CarrierPayerID")
                        .HasMaxLength(20);

                    b.Property<string>("City");

                    b.Property<int?>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("DayClubByProvider");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<int>("Form1500PrintFormat")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("InsOthers")
                        .HasMaxLength(100);

                    b.Property<int>("InsuranceTypeId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEDIPayer");

                    b.Property<bool>("IsPractitionerIsRenderingProvider")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Phone");

                    b.Property<int>("StateID");

                    b.Property<string>("TPLCode")
                        .HasMaxLength(20);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InsuranceTypeId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InsuranceCompanies");
                });

            modelBuilder.Entity("HC.Patient.Entity.InsuredPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsuredPersonId");

                    b.Property<string>("Address1")
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<int>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int>("GenderID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("OtherRelationshipName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientID");

                    b.Property<int>("PatientInsuranceID");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<int>("RelationshipID");

                    b.Property<int>("StateID");

                    b.Property<string>("Title")
                        .HasMaxLength(10);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Zip")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GenderID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientInsuranceID")
                        .IsUnique();

                    b.HasIndex("RelationshipID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InsuredPerson");
                });

            modelBuilder.Entity("HC.Patient.Entity.InvitationRejectLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("InvitationId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("RejectRemarks")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InvitationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InvitationRejectLogs");
                });

            modelBuilder.Entity("HC.Patient.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID");

                    b.Property<string>("Address")
                        .HasMaxLength(1000);

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<long>("BillingNPINumber");

                    b.Property<string>("BillingProviderInfo")
                        .HasMaxLength(1000);

                    b.Property<long>("BillingTaxId");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<int?>("Code");

                    b.Property<int?>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal?>("DaylightSavingTime");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("FacilityCode");

                    b.Property<long>("FacilityNPINumber");

                    b.Property<long>("FacilityProviderNumber");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Latitude");

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double?>("Longitude");

                    b.Property<decimal?>("MileageRate");

                    b.Property<DateTime?>("OfficeEndHour");

                    b.Property<DateTime?>("OfficeStartHour");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<decimal?>("StandardTime");

                    b.Property<int?>("StateID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Zip")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FacilityCode");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("HC.Patient.Entity.MachineLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LoginDate");

                    b.Property<string>("MacAddress")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("UniqueDeviceId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UserId");

                    b.ToTable("MachineLoginLog");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAdjustmentGroupCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CodeDescription");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterAdjustmentGroupCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAdministrationSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdministrationSiteID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("HL7");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("SNOMED")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterAdministrationSite");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAllergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllergyID");

                    b.Property<string>("AllergyType");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterAllergies");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID");

                    b.Property<string>("CityName")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("StateID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterCity");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("StatusName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterClaimStatus");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterClaimStatusCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterClaimStatusCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterCountry");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCustomLabels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomLabelID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomLabelName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CustomLabelTypeID");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int>("RoleTypeID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomLabelTypeID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RoleTypeID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterCustomLabels");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DegreeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DegreeName")
                        .HasMaxLength(50);

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterDegree");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DisciplineID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Discipline");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterDiscipline");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDocumentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterDocumentTypes");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDocumentTypesStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterDocumentTypesStaff");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEligibilityEnquiryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("StatusName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterEligibilityEnquiryStatus");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EmailType")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterEmailType");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEthnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EthnicityID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("EthnicityName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterEthnicity");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GenderID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterGender");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterICD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ICDID");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("CodeType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ICD10");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterICD");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterImmunityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImmunityStatusID");

                    b.Property<string>("ConceptCode")
                        .HasMaxLength(10);

                    b.Property<string>("ConceptName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Defination")
                        .HasMaxLength(300);

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("HL7Code")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("NIP004");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterImmunityStatus");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterImmunization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImmunizationID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CvxCode")
                        .HasMaxLength(50);

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("InternalID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("NonVaccine");

                    b.Property<string>("Note");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("ShortDesc")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VaccineName");

                    b.Property<string>("VaccineStatus")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterImmunization");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("InsuranceCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("InsuranceType");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterInsuranceTypes");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterLabs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LabID");

                    b.Property<string>("Address1")
                        .HasMaxLength(500);

                    b.Property<string>("Address2")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LabName")
                        .HasMaxLength(100);

                    b.Property<string>("LabPhone")
                        .HasMaxLength(20);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int>("StateID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Zip")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterLabs");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterLonic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LonicID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LonicCode");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterLonic");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterManufacture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManufactureID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MVXCode")
                        .HasMaxLength(50);

                    b.Property<string>("ManufacturerName")
                        .HasMaxLength(500);

                    b.Property<int>("Notes");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterManufacture");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterModifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modifier")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterModifiers");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDirectService");

                    b.Property<string>("NavigationLink")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Type");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterNoteType");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNotificationActionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("SubTypeId");

                    b.Property<int?>("TypeId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterNotificationActionTypes");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterNotificationTypes");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPatientLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientLocationID");

                    b.Property<int>("Code");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(100);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPatientLocation");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPaymentDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DescriptionType");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<int?>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPaymentDescription");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AssociatedEntity")
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("PaymentType");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPaymentType");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPayrollBreakTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("BreakDuration");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("EndRange");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NumberOfBreaks");

                    b.Property<decimal>("StartRange");

                    b.Property<string>("StateAbbr")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPayrollBreakTime");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPayrollGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PayrollGroupID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("PayrollGroup");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPayrollGroup");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PharmacyID");

                    b.Property<int?>("CityID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PharmacyAddress");

                    b.Property<string>("PharmacyFaxNumber");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(200);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPharmacy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPreferredLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LanguageID");

                    b.Property<string>("Code");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Language");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterPreferredLanguage");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProgramID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("ProgramName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterProgram");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RaceID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("RaceName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterRace");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReactionID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("Reaction");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterReaction");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReferralID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("ReferralName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterReferral");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RejectionReasonID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("ReasonCode")
                        .HasMaxLength(5);

                    b.Property<string>("ReasonDesc")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterRejectionReason");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RelationshipID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("RelationshipCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("RelationshipName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterRelationship");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRoundingRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RuleID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("RuleName")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterRoundingRules");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRouteOfAdministration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RouteOfAdministrationID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Definition")
                        .HasMaxLength(500);

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("FDANCI")
                        .HasMaxLength(10);

                    b.Property<string>("HL7")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterRouteOfAdministration");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServiceCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceCodeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBillable");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequiredAuthorization")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<decimal>("RatePerUnit");

                    b.Property<int>("RuleID");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(30);

                    b.Property<int>("UnitDuration");

                    b.Property<int>("UnitTypeID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RuleID");

                    b.HasIndex("UnitTypeID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterServiceCode");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServiceCodeModifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifierID");

                    b.Property<int?>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Modifier");

                    b.Property<decimal>("Rate");

                    b.Property<int>("ServiceCodeID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ServiceCodeID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterServiceCodeModifiers");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterServices");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateID");

                    b.Property<int?>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<decimal?>("DaylightSavingTime");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<decimal?>("StandardTime");

                    b.Property<string>("StateAbbr")
                        .HasMaxLength(2);

                    b.Property<string>("StateName")
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterState");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TagID");

                    b.Property<string>("ColorCode");

                    b.Property<string>("ColorName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("FontColorCode")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("#000000");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("RoleTypeID");

                    b.Property<string>("Tag")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RoleTypeID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterTags");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MasterCategoryName");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterTemplateCategory");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("TemplateCategoryId");

                    b.Property<string>("TemplateJson")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName");

                    b.Property<int?>("TemplateSubCategoryId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("TemplateCategoryId");

                    b.HasIndex("TemplateSubCategoryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterTemplates");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplateSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MasterSubCategoryName");

                    b.Property<string>("MasterSubCategoryValue");

                    b.Property<int>("MasterTemplateCategoryId");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MasterTemplateCategoryId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterTemplateSubCategory");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitTypeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<string>("UnitTypeName");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterUnitType");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterVFCEligibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VFCID");

                    b.Property<string>("ConceptCode")
                        .HasMaxLength(10);

                    b.Property<string>("ConceptName");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterVFCEligibility");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterWeekDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DayId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Day");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MasterWeekDays");
                });

            modelBuilder.Entity("HC.Patient.Entity.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MenuID");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("MenuIcon")
                        .HasColumnType("varchar(700)");

                    b.Property<string>("MenuName")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrganizationID")
                        .HasColumnName("OrganizationID");

                    b.HasKey("MenuID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("HC.Patient.Entity.MenuPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MenuId");

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("Permission");

                    b.Property<int>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MenuPermissions");
                });

            modelBuilder.Entity("HC.Patient.Entity.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("FromUserID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFavourite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("MessageDate");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("ParentMessageId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(1500)");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("MessageID");

                    b.HasIndex("FromUserID");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentMessageId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("HC.Patient.Entity.MessageDocuments", b =>
                {
                    b.Property<int>("MessageDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("MessageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("MessageDocumentID");

                    b.HasIndex("MessageID");

                    b.ToTable("MessageDocuments");
                });

            modelBuilder.Entity("HC.Patient.Entity.MessageRecepient", b =>
                {
                    b.Property<int>("MessageRecepientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFavourite")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("MessageDate");

                    b.Property<int>("MessageId");

                    b.Property<int>("ToUserID");

                    b.Property<bool>("Unread")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("MessageRecepientID");

                    b.HasIndex("MessageId");

                    b.HasIndex("ToUserID");

                    b.ToTable("MessageRecepient");
                });

            modelBuilder.Entity("HC.Patient.Entity.ModulePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModuleId");

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("Permission");

                    b.Property<int>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ModulePermissions");
                });

            modelBuilder.Entity("HC.Patient.Entity.Modules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("MenuID");

                    b.Property<string>("ModuleIcon")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModuleKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(100);

                    b.Property<string>("NavigationLink")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("HC.Patient.Entity.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionTypeId");

                    b.Property<int?>("ChatId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNotificationSend");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("PatientAppointmentId");

                    b.Property<int?>("PatientId");

                    b.Property<int?>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ChatId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientAppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HC.Patient.Entity.NotificationTypeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AttemptCount");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReadNotification");

                    b.Property<bool>("IsReceivedNotification");

                    b.Property<bool>("IsSendNotification");

                    b.Property<string>("Message");

                    b.Property<int>("NotificationId");

                    b.Property<int>("NotificationTypeId");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Subject");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("NotificationTypeMappings");
                });

            modelBuilder.Entity("HC.Patient.Entity.OpenTokSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APIKey");

                    b.Property<string>("APISecret");

                    b.Property<string>("APIUrl");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OpenTokSettings");
                });

            modelBuilder.Entity("HC.Patient.Entity.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrganizationID");

                    b.Property<string>("Address1")
                        .HasMaxLength(1000);

                    b.Property<string>("Address2")
                        .HasMaxLength(1000);

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<decimal?>("BookingCommision");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPersonLastName")
                        .HasMaxLength(50);

                    b.Property<int?>("ContactPersonMaritalStatus");

                    b.Property<string>("ContactPersonMiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPersonPhoneNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DatabaseDetailId");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("Favicon");

                    b.Property<string>("Fax")
                        .HasMaxLength(40);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Latitude");

                    b.Property<string>("Logo");

                    b.Property<double?>("Longitude");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(60);

                    b.Property<string>("PaymentMode");

                    b.Property<string>("PayrollEndWeekDay")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PayrollStartWeekDay")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<int?>("StateID");

                    b.Property<string>("StripeKey");

                    b.Property<string>("StripeSecretKey");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VendorIdDirect")
                        .HasMaxLength(50);

                    b.Property<string>("VendorIdIndirect")
                        .HasMaxLength(50);

                    b.Property<string>("VendorNameDirect")
                        .HasMaxLength(250);

                    b.Property<string>("VendorNameIndirect")
                        .HasMaxLength(250);

                    b.Property<string>("Zip")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonMaritalStatus");

                    b.HasIndex("CountryID");

                    b.HasIndex("StateID");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("HC.Patient.Entity.OrganizationSMTPDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ConnectionSecurity")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Port")
                        .HasMaxLength(50);

                    b.Property<string>("SMTPPassword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SMTPUserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ServerName")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrganizationSMTPDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.OrganizationSubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("AmountPerClient");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100);

                    b.Property<int>("PlanType");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TotalNumberOfClients");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrganizationSubscriptionPlan");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID");

                    b.Property<byte[]>("Address1");

                    b.Property<byte[]>("Address2");

                    b.Property<int?>("AddressTypeID");

                    b.Property<byte[]>("ApartmentNumber");

                    b.Property<byte[]>("City");

                    b.Property<int>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsMailingSame");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Others");

                    b.Property<int>("PatientID");

                    b.Property<int>("PatientLocationID");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<int>("StateID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<byte[]>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientLocationID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientAddress");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAllergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientAllergyId");

                    b.Property<string>("Allergen")
                        .HasMaxLength(100);

                    b.Property<int>("AllergyTypeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(2000);

                    b.Property<int>("PatientID");

                    b.Property<int>("ReactionID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AllergyTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("ReactionID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientAppointmentId");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("AppointmentTypeID");

                    b.Property<int?>("AuthorizationId");

                    b.Property<string>("BookingMode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BookingType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500);

                    b.Property<int?>("CancelTypeId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomAddress")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CustomAddressID");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<TimeSpan?>("DriveTime");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("InvitationAcceptRejectRemarks");

                    b.Property<int?>("InvitationAppointentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsClientRequired");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDirectService");

                    b.Property<bool>("IsExcludedFromMileage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRecurrence")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsTelehealthAppointment")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<decimal?>("Mileage");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<int?>("OfficeAddressID");

                    b.Property<int?>("Offset");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("ParentAppointmentID");

                    b.Property<int?>("PatientAddressID");

                    b.Property<int?>("PatientID");

                    b.Property<int?>("PatientInsuranceId");

                    b.Property<string>("RecurrenceRule");

                    b.Property<int?>("ServiceLocationID");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeID");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CancelTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomAddressID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OfficeAddressID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientAddressID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("ServiceLocationID");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientAppointment");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientCustomLabels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientCustomLabelID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomLabelDataType")
                        .IsRequired();

                    b.Property<int>("CustomLabelID");

                    b.Property<string>("CustomLabelValue")
                        .IsRequired();

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("PatientID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomLabelID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientCustomLabels");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientDiagnosisId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("DiagnosisDate");

                    b.Property<int>("ICDID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PatientID");

                    b.Property<DateTime?>("ResolveDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ICDID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientDiagnosis");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AppointmentTypeId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomAddress")
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CustomAddressID");

                    b.Property<DateTime>("DateOfService")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsBillableEncounter");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("MasterPatientLocationId");

                    b.Property<string>("NonBillableNotes")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("NotetypeId");

                    b.Property<int?>("OfficeAddressID");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("PatientAddressID");

                    b.Property<int?>("PatientAppointmentId");

                    b.Property<int?>("PatientID");

                    b.Property<int?>("ServiceLocationID");

                    b.Property<int?>("StaffID")
                        .IsRequired();

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("Status");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomAddressID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MasterPatientLocationId");

                    b.HasIndex("NotetypeId");

                    b.HasIndex("OfficeAddressID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientAddressID");

                    b.HasIndex("PatientAppointmentId");

                    b.HasIndex("PatientID");

                    b.HasIndex("ServiceLocationID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientEncounter");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterCodesMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMapped");

                    b.Property<int>("PatientEncounterDiagnosisCodeId");

                    b.Property<int>("PatientEncounterId");

                    b.Property<int>("PatientEncounterServiceCodeId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientEncounterDiagnosisCodeId");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("PatientEncounterServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientEncounterCodesMapping");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterDiagnosisCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("ICDCodeId");

                    b.Property<int>("ICDID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientEncounterId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ICDCodeId");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientEncounterDiagnosisCodes");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterServiceCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AuthProcedureCPTLinkId");

                    b.Property<string>("AuthorizationNumber");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Modifier1");

                    b.Property<int?>("Modifier2");

                    b.Property<int?>("Modifier3");

                    b.Property<int?>("Modifier4");

                    b.Property<int>("PatientEncounterId");

                    b.Property<int>("ServiceCodeId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthProcedureCPTLinkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Modifier1");

                    b.HasIndex("Modifier2");

                    b.HasIndex("Modifier3");

                    b.HasIndex("Modifier4");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("ServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientEncounterServiceCodes");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("MasterTemplateId");

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("PatientEncounterId");

                    b.Property<string>("TemplateData")
                        .HasColumnType("text");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MasterTemplateId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientEncounterTemplates");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientGuardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GuardianId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("GuardianAddress1")
                        .HasMaxLength(500);

                    b.Property<string>("GuardianAddress2")
                        .HasMaxLength(500);

                    b.Property<string>("GuardianCity")
                        .HasMaxLength(100);

                    b.Property<string>("GuardianEmail")
                        .HasMaxLength(256);

                    b.Property<string>("GuardianFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("GuardianHomePhone")
                        .HasMaxLength(20);

                    b.Property<string>("GuardianLastName")
                        .HasMaxLength(100);

                    b.Property<string>("GuardianMiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("GuardianMobile")
                        .HasMaxLength(20);

                    b.Property<int?>("GuardianState");

                    b.Property<string>("GuardianWorkPhone")
                        .HasMaxLength(20);

                    b.Property<string>("GuardianZip")
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGuarantor");

                    b.Property<string>("OtherRelationshipName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientID");

                    b.Property<int>("RelationshipID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GuardianState");

                    b.HasIndex("PatientID");

                    b.HasIndex("RelationshipID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientGuardian");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientImmunization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImmunizationId");

                    b.Property<int?>("AdministeredBy");

                    b.Property<DateTime>("AdministeredDate");

                    b.Property<int?>("AdministrationSiteID");

                    b.Property<int?>("AmountAdministered");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("ExpireDate")
                        .IsRequired();

                    b.Property<int>("ImmunityStatusID");

                    b.Property<int>("Immunization");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("ManufactureID");

                    b.Property<int?>("OrderBy");

                    b.Property<int>("PatientID");

                    b.Property<bool>("RejectedImmunization");

                    b.Property<int?>("RejectionReasonID");

                    b.Property<string>("RejectionReasonNote");

                    b.Property<int?>("RouteOfAdministrationID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VFCID");

                    b.Property<string>("VaccineLotNumber");

                    b.HasKey("Id");

                    b.HasIndex("AdministeredBy");

                    b.HasIndex("AdministrationSiteID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ImmunityStatusID");

                    b.HasIndex("Immunization");

                    b.HasIndex("ManufactureID");

                    b.HasIndex("OrderBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("RejectionReasonID");

                    b.HasIndex("RouteOfAdministrationID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VFCID");

                    b.ToTable("PatientImmunization");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientInsuranceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientInsuranceID");

                    b.Property<DateTime?>("CardIssueDate");

                    b.Property<string>("CarrierPayerID")
                        .HasMaxLength(20);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("InsuranceClaimOfficeNumber")
                        .HasMaxLength(20);

                    b.Property<string>("InsuranceCompanyAddress")
                        .HasMaxLength(500);

                    b.Property<int>("InsuranceCompanyID");

                    b.Property<string>("InsuranceGroupName")
                        .HasMaxLength(100);

                    b.Property<string>("InsuranceGroupNumber")
                        .HasMaxLength(50);

                    b.Property<byte[]>("InsuranceIDNumber");

                    b.Property<bool?>("InsurancePersonSameAsPatient");

                    b.Property<string>("InsurancePhotoPathBack");

                    b.Property<string>("InsurancePhotoPathFront");

                    b.Property<string>("InsurancePhotoPathThumbBack");

                    b.Property<string>("InsurancePhotoPathThumbFront");

                    b.Property<string>("InsurancePlanName")
                        .HasMaxLength(100);

                    b.Property<int?>("InsurancePlanTypeID");

                    b.Property<int?>("InsuranceTypeID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVerified");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int>("PatientID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("VisitsAllowedPerYear");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InsuranceCompanyID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientInsuranceDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TestId");

                    b.Property<string>("ConditionOfSpecimen")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FillerOrderNumber")
                        .HasMaxLength(100);

                    b.Property<string>("FrequencyDuration")
                        .HasMaxLength(100);

                    b.Property<int?>("FrequencyDurationID");

                    b.Property<int?>("FrequencyID");

                    b.Property<string>("HL7Result");

                    b.Property<string>("Hl7");

                    b.Property<string>("Hl7Url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LabName");

                    b.Property<int?>("LoincCodeID");

                    b.Property<string>("Notes");

                    b.Property<int?>("OrderBy");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100);

                    b.Property<bool>("Ordered");

                    b.Property<int>("PatientID");

                    b.Property<DateTime>("ScheduledDate");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TestSpecimenSource")
                        .HasMaxLength(200);

                    b.Property<int>("TestTypeID");

                    b.Property<int?>("TimeTypeID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LoincCodeID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientLabTest");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedicalFamilyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MedicalFamilyHistoryId");

                    b.Property<string>("CauseOfDeath");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DOB")
                        .IsRequired();

                    b.Property<DateTime?>("DateOfDeath");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("GenderID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Observation");

                    b.Property<string>("OtherRelationshipName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Others")
                        .HasMaxLength(100);

                    b.Property<int>("PatientID");

                    b.Property<int>("RelationshipID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GenderID");

                    b.HasIndex("PatientID");

                    b.HasIndex("RelationshipID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientMedicalFamilyHistory");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedicalFamilyHistoryDiseases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AgeOfDiagnosis");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("DiseaseID");

                    b.Property<bool?>("DiseaseStatus");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("MedicalFamilyHistoryId");

                    b.Property<int>("PatientID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("MedicalFamilyHistoryId");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientMedicalFamilyHistoryDiseases");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientMedicationId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Dose");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("FrequencyID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Medicine")
                        .HasMaxLength(200);

                    b.Property<int>("PatientID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Strength");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FrequencyID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientMedication");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientPrescriptionId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Directions");

                    b.Property<string>("Dose");

                    b.Property<int>("DrugID");

                    b.Property<string>("Duration");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("FrequencyID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes");

                    b.Property<int>("PatientID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Strength");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DrugID");

                    b.HasIndex("FrequencyID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientPrescription");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientPrescriptionFaxLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CityID");

                    b.Property<int>("CountryID");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("FaxStatus");

                    b.Property<int>("IsFax");

                    b.Property<int>("PatientId");

                    b.Property<string>("PharmacyAddress");

                    b.Property<string>("PharmacyFaxNumber");

                    b.Property<int>("PharmacyID");

                    b.Property<string>("PrescriptionId");

                    b.Property<DateTime>("SentDate");

                    b.Property<string>("SourceFaxNumber");

                    b.Property<int>("StateID");

                    b.HasKey("Id");

                    b.ToTable("PatientPrescriptionFaxLog");
                });

            modelBuilder.Entity("HC.Patient.Entity.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientID");

                    b.Property<int?>("Citizenship");

                    b.Property<string>("ClientID")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUTCDate()");

                    b.Property<string>("CustomerId");

                    b.Property<byte[]>("DOB");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<byte[]>("Email");

                    b.Property<string>("EmergencyContactFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("EmergencyContactLastName")
                        .HasMaxLength(100);

                    b.Property<string>("EmergencyContactOthers")
                        .HasMaxLength(100);

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20);

                    b.Property<int?>("EmergencyContactRelationship");

                    b.Property<int?>("EmploymentID");

                    b.Property<int?>("Ethnicity");

                    b.Property<byte[]>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPortalActivate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPortalRequired")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified");

                    b.Property<byte[]>("LastName");

                    b.Property<int>("LocationID");

                    b.Property<byte[]>("MRN");

                    b.Property<int?>("MaritalStatus");

                    b.Property<byte[]>("MiddleName");

                    b.Property<string>("Note");

                    b.Property<bool?>("OptOut");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("PhotoPath");

                    b.Property<string>("PhotoThumbnailPath");

                    b.Property<string>("PrimaryProvider")
                        .HasMaxLength(100);

                    b.Property<int?>("Race");

                    b.Property<int?>("RenderingProviderID");

                    b.Property<byte[]>("SSN");

                    b.Property<int?>("SecondaryRaceID");

                    b.Property<int?>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("Citizenship");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EmergencyContactRelationship");

                    b.HasIndex("EmploymentID");

                    b.HasIndex("Ethnicity");

                    b.HasIndex("Gender");

                    b.HasIndex("LocationID");

                    b.HasIndex("MaritalStatus");

                    b.HasIndex("Race");

                    b.HasIndex("SecondaryRaceID");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientSocialHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SocialHistoryId");

                    b.Property<int>("AlcohalID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("DrugID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Occupation")
                        .HasMaxLength(300);

                    b.Property<int>("PatientID");

                    b.Property<int>("TobaccoID");

                    b.Property<int>("TravelID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientSocialHistory");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientTagID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PatientID");

                    b.Property<int>("TagID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("TagID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientTags");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientVitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientVitalId");

                    b.Property<double?>("BMI");

                    b.Property<int?>("BPDiastolic");

                    b.Property<int?>("BPSystolic");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("HeartRate");

                    b.Property<double?>("HeightIn");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PatientID");

                    b.Property<int?>("Pulse");

                    b.Property<int?>("Respiration");

                    b.Property<double?>("Temperature");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<DateTime>("VitalDate");

                    b.Property<double?>("WeightLbs");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerAppointmentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AppointmentTypeId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("Modifier1");

                    b.Property<int?>("Modifier2");

                    b.Property<int?>("Modifier3");

                    b.Property<int?>("Modifier4");

                    b.Property<int>("PayerId");

                    b.Property<int>("PayerServiceCodeId");

                    b.Property<decimal?>("RatePerUnit");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Modifier1");

                    b.HasIndex("Modifier2");

                    b.HasIndex("Modifier3");

                    b.HasIndex("Modifier4");

                    b.HasIndex("PayerId");

                    b.HasIndex("PayerServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PayerAppointmentTypes");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerServiceCodeModifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PayerModifierId");

                    b.Property<int?>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<string>("Modifier");

                    b.Property<int>("PayerServiceCodeId");

                    b.Property<decimal>("Rate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PayerServiceCodeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PayerServiceCodeModifiers");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerServiceCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBillable");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequiredAuthorization")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<decimal?>("NewRatePerUnit");

                    b.Property<int>("PayerId");

                    b.Property<decimal>("RatePerUnit");

                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("ServiceCodeId");

                    b.Property<int>("UnitDuration");

                    b.Property<int>("UnitType");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PayerId");

                    b.HasIndex("RuleID");

                    b.HasIndex("ServiceCodeId");

                    b.HasIndex("UnitType");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PayerServiceCodes");
                });

            modelBuilder.Entity("HC.Patient.Entity.PaymentCheckDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("GuarantorId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int?>("PatientId");

                    b.Property<int?>("PayerId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("RefrenceNo")
                        .HasMaxLength(20);

                    b.Property<int>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GuarantorId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PatientId");

                    b.HasIndex("PayerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PaymentCheckDetail");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollBreakTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("StateId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PayrollBreakTime");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollBreakTimeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("EndRange");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NumberOfBreaks");

                    b.Property<int>("PayrollBreakTimeId");

                    b.Property<decimal>("StartRange");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PayrollBreakTimeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PayrollBreakTimeDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal>("DailyLimit");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("DoubleOverTime");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCaliforniaRule");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<decimal>("OverTime");

                    b.Property<int>("PayPeriodId");

                    b.Property<int>("PayrollBreakTimeId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("WeeklyLimit");

                    b.Property<int>("WorkWeekId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PayPeriodId");

                    b.HasIndex("PayrollBreakTimeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkWeekId");

                    b.ToTable("PayrollGroup");
                });

            modelBuilder.Entity("HC.Patient.Entity.PhoneNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("OtherPhoneNumberType")
                        .HasMaxLength(50);

                    b.Property<int?>("PatientID");

                    b.Property<byte[]>("PhoneNumber");

                    b.Property<int>("PhoneNumberTypeId");

                    b.Property<int>("PreferenceID");

                    b.Property<int?>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("PreferenceID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("HC.Patient.Entity.PrescriptionDrugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Dose");

                    b.Property<string>("DrugName");

                    b.Property<string>("Strength");

                    b.HasKey("Id");

                    b.ToTable("PrescriptionDrugs");
                });

            modelBuilder.Entity("HC.Patient.Entity.ProviderCareCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CareCategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProviderCareCategory");
                });

            modelBuilder.Entity("HC.Patient.Entity.ReviewRatings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReviewRatingId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientAppointmentId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientAppointmentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReviewRatings");
                });

            modelBuilder.Entity("HC.Patient.Entity.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RolePermissionID");

                    b.Property<bool>("CreatePermission");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("DeletePermission");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("EditPermission");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ModuleID");

                    b.Property<int>("RoleID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<bool>("ViewPermission");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModuleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("HC.Patient.Entity.RoundingRuleDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RuleDetailID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("EndRange");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RuleID");

                    b.Property<decimal>("StartRange");

                    b.Property<int>("Unit");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RuleID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RoundingRuleDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.ScreenPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ModuleId");

                    b.Property<int>("OrganizationId");

                    b.Property<bool>("Permission");

                    b.Property<int>("RoleId");

                    b.Property<int>("ScreenId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ModuleId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScreenId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ScreenPermissions");
                });

            modelBuilder.Entity("HC.Patient.Entity.Screens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ModuleId");

                    b.Property<string>("NavigationLink")
                        .HasMaxLength(100);

                    b.Property<string>("ScreenKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ScreenName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("HC.Patient.Entity.SecurityQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID");

                    b.Property<string>("Question")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SecurityQuestions");
                });

            modelBuilder.Entity("HC.Patient.Entity.SoapNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Assessment");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Objective");

                    b.Property<int>("PatientEncounterId");

                    b.Property<string>("Plans");

                    b.Property<string>("Subjective");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SoapNotes");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffAvailabilityId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("Date");

                    b.Property<int?>("DayId");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("LocationId");

                    b.Property<int>("StaffAvailabilityTypeID");

                    b.Property<int>("StaffID");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DayId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("StaffAvailabilityTypeID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffAvailability");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AwardDate");

                    b.Property<string>("AwardType")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffAwards");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffCareCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CareCategoryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CareCategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffCareCategories");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffCustomLabels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffCustomLabelID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("CustomLabelDataType")
                        .IsRequired();

                    b.Property<int>("CustomLabelID");

                    b.Property<string>("CustomLabelValue")
                        .IsRequired();

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomLabelID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffCustomLabels");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffExperiences");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("ApprovalDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FromDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("LeaveReasonId");

                    b.Property<int>("LeaveStatusId");

                    b.Property<int>("LeaveTypeId");

                    b.Property<string>("OtherLeaveReason")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OtherLeaveType")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("ToDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("LeaveStatusId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffLeave");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("LocationID");

                    b.Property<int>("OrganizationID");

                    b.Property<int>("StaffId");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLocation");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffPayrollRateForActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentTypeId");

                    b.Property<int?>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PayRate");

                    b.Property<int>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffPayrollRateForActivity");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffQualifications");
                });

            modelBuilder.Entity("HC.Patient.Entity.Staffs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffID");

                    b.Property<string>("AboutMe")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000);

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(20);

                    b.Property<string>("CAQHID")
                        .HasMaxLength(15);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<int?>("CountryID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime>("DOB");

                    b.Property<DateTime>("DOJ");

                    b.Property<int?>("DegreeID");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmployeeID")
                        .HasMaxLength(100);

                    b.Property<int?>("EmployeeTypeID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRenderingProvider")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MaritalStatus");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("NPINumber")
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationID");

                    b.Property<decimal>("PayRate");

                    b.Property<int?>("PayrollGroupID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("PhotoPath");

                    b.Property<string>("PhotoThumbnailPath");

                    b.Property<int>("RoleID");

                    b.Property<string>("SSN")
                        .HasMaxLength(20);

                    b.Property<int?>("StateID");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TerminationDate");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.Property<string>("Zip")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DegreeID");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EmployeeTypeID");

                    b.HasIndex("Gender");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("PayrollGroupID");

                    b.HasIndex("RoleID");

                    b.HasIndex("StateID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceId");

                    b.Property<int>("StaffId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffServices");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("GlobalCodeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GlobalCodeId");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffSpecialities");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffTagID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("StaffID");

                    b.Property<int>("TagID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffID");

                    b.HasIndex("TagID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffTags");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTaxonomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("GlobalCodeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StaffID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GlobalCodeId");

                    b.HasIndex("StaffID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffTaxonomies");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("StaffId");

                    b.Property<int>("StaffTeamID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffTeamID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("StaffTeam");
                });

            modelBuilder.Entity("HC.Patient.Entity.SubcriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubcriptionPlanID");

                    b.Property<decimal>("AmountPerClient");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("PlanType");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("SubcriptionPlan");
                });

            modelBuilder.Entity("HC.Patient.Entity.SymptomatePatientReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AbsentSymptoms");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FinalConditions");

                    b.Property<int>("PatientID");

                    b.Property<string>("PresentSymptoms");

                    b.Property<string>("ReportedSymptoms");

                    b.Property<string>("UnknownSymptoms");

                    b.HasKey("Id");

                    b.ToTable("SymptomatePatientReport");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthRecordingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ArchiveId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("TelehealthSessionDetailID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TelehealthSessionDetailID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TelehealthRecordingDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthSessionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AppointmentId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationId");

                    b.Property<int?>("PatientID");

                    b.Property<string>("SessionID");

                    b.Property<int?>("StaffId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientID");

                    b.HasIndex("StaffId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TelehealthSessionDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthTokenDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("InvitationId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStaffToken");

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("TelehealthSessionDetailID");

                    b.Property<string>("Token");

                    b.Property<double>("TokenExpiry");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InvitationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TelehealthSessionDetailID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TelehealthTokenDetails");
                });

            modelBuilder.Entity("HC.Patient.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("ApnToken");

                    b.Property<DateTime?>("BlockDateTime");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeviceToken");

                    b.Property<int?>("ExpirationPeriodInDays");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBlock")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOnline");

                    b.Property<bool?>("IsPasscodeEnable");

                    b.Property<bool?>("IsSecurityQuestionMandatory");

                    b.Property<bool?>("OpenDefaultClient");

                    b.Property<int>("OrganizationID");

                    b.Property<string>("Password");

                    b.Property<DateTime?>("PasswordResetDate");

                    b.Property<int>("RoleID");

                    b.Property<DateTime?>("TempIdGeneratedTime");

                    b.Property<Guid?>("TempResetPasswordId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserDocumentId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(100);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("DocumentTypeId");

                    b.Property<int?>("DocumentTypeIdStaff");

                    b.Property<DateTime?>("Expiration");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Key");

                    b.Property<string>("OtherDocumentType");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UploadPath");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("DocumentTypeIdStaff");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserFavourites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FavouritesID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<int>("PatientID");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserID");

                    b.ToTable("UserFavourites");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvitationSendDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("InvitationStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("InvitedUserId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LocationId");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserInvitation");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserPasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswordHistory");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100);

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("DeletedBy");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleTypeID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrganizationID");

                    b.Property<string>("RoleTypeName")
                        .HasMaxLength(200);

                    b.Property<string>("TypeKey")
                        .HasMaxLength(200);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserRoleType");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserSecurityQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Answer")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("OrganizationID");

                    b.Property<int>("QuestionID");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("UserSecurityQuestionAnswer");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Speciality");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("StaffId");

                    b.Property<int?>("StaffsId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StaffsId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserSpeciality");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserTimesheetByAppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("ActualTimeDuration");

                    b.Property<int?>("AppointmentTypeId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("DateOfService");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<decimal>("Distance");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<decimal>("ExpectedTimeDuration");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsTravelTime");

                    b.Property<int>("LocationId");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("PatientEncounterId");

                    b.Property<int>("StaffId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("StatusId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PatientEncounterId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserTimesheetByAppointmentType");
                });

            modelBuilder.Entity("HC.Patient.Entity.ActionPermissions", b =>
                {
                    b.HasOne("HC.Patient.Entity.Actions", "Actions")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Modules", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Screens", "Screens")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Actions", b =>
                {
                    b.HasOne("HC.Patient.Entity.Screens", "Screens")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.AppConfigurations", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentAuthorization", b =>
                {
                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.AuthProcedureCPT", "AuthProcedureCPT")
                        .WithMany()
                        .HasForeignKey("AuthProcedureCPTLinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterServiceCode")
                        .WithMany()
                        .HasForeignKey("ServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentPaymentRefund", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentPayments", b =>
                {
                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentStaff", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany("AppointmentStaff")
                        .HasForeignKey("PatientAppointmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AppointmentType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogColumn", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuditLogTable", "AuditLogTable")
                        .WithMany()
                        .HasForeignKey("AuditLogTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogs", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuditLogColumn", "AuditLogColumn")
                        .WithMany()
                        .HasForeignKey("AuditLogColumnId");

                    b.HasOne("HC.Patient.Entity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuditLogTable", b =>
                {
                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthenticationToken", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Authorization", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("Authorization")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthorizationProcedures", b =>
                {
                    b.HasOne("HC.Patient.Entity.Authorization")
                        .WithMany("AuthorizationProcedures")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthProcedureCPT", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuthorizationProcedures", "AuthorizationProcedure")
                        .WithMany("AuthProcedureCPTLink")
                        .HasForeignKey("AuthorizationProceduresId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterCPT")
                        .WithMany("AuthProcedureCPT")
                        .HasForeignKey("CPTID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.AuthProcedureCPTModifiers", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuthProcedureCPT", "AuthProcedureCPT")
                        .WithMany("AuthProcedureCPTModifiers")
                        .HasForeignKey("AuthProcedureCPTLinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Chat", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatConnectedUser", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithOne("ChatConnectedUser")
                        .HasForeignKey("HC.Patient.Entity.ChatConnectedUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatRoom", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ChatRoomUser", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "ChatUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835Batch", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835Claims", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim835Batch", "Claim835Batch")
                        .WithMany()
                        .HasForeignKey("Claim835BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Claim837Claims", "Claim837Claims")
                        .WithMany()
                        .HasForeignKey("Claim837ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835ServiceLine", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim835Claims", "Claim835Claims")
                        .WithMany()
                        .HasForeignKey("Claim835ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Claim837ServiceLine", "Claim837ServiceLine")
                        .WithMany()
                        .HasForeignKey("Claim837ServiceLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim835ServiceLineAdjustmentDetail", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim835ServiceLine", "Claim835ServiceLine")
                        .WithMany()
                        .HasForeignKey("Claim835ServiceLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837Batch", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.EDIGateway", "EDIGateway")
                        .WithMany()
                        .HasForeignKey("EDIGatewayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837Claims", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim837Batch", "Claim837Batch")
                        .WithMany()
                        .HasForeignKey("Claim837BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("PayerPreference")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode1")
                        .WithMany()
                        .HasForeignKey("SubmissionType");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claim837ServiceLine", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim837Claims", "Claim837Claims")
                        .WithMany()
                        .HasForeignKey("Claim837ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.ClaimServiceLine", "ClaimServiceLine")
                        .WithMany()
                        .HasForeignKey("ServiceLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimDiagnosisCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimEncounters", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimHistory", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimProviders", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Clinicians")
                        .WithMany()
                        .HasForeignKey("ClinicianId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "RenderingProviders")
                        .WithMany()
                        .HasForeignKey("RenderingProviderId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimResubmissionReason", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Claims", b =>
                {
                    b.HasOne("HC.Patient.Entity.GlobalCode", "ClaimPaymentStatus")
                        .WithMany()
                        .HasForeignKey("ClaimPaymentStatusId");

                    b.HasOne("HC.Patient.Entity.MasterClaimStatus", "MasterClaimStatus")
                        .WithMany()
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs1")
                        .WithMany()
                        .HasForeignKey("ClinicianId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation")
                        .WithMany()
                        .HasForeignKey("CustomAddressID");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Location", "Location1")
                        .WithMany()
                        .HasForeignKey("OfficeAddressID");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressID");

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs2")
                        .WithMany()
                        .HasForeignKey("RenderingProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("ServiceLocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimServiceLine", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuthProcedureCPT", "AuthProcedureCPT")
                        .WithMany()
                        .HasForeignKey("AuthProcedureCPTLinkId");

                    b.HasOne("HC.Patient.Entity.Claims", "Claims")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs1")
                        .WithMany()
                        .HasForeignKey("ClinicianId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation")
                        .WithMany()
                        .HasForeignKey("CustomAddressID");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.ClaimDiagnosisCode", "ClaimDiagnosisCode1")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodePointer1");

                    b.HasOne("HC.Patient.Entity.ClaimDiagnosisCode", "ClaimDiagnosisCode2")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodePointer2");

                    b.HasOne("HC.Patient.Entity.ClaimDiagnosisCode", "ClaimDiagnosisCode3")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodePointer3");

                    b.HasOne("HC.Patient.Entity.ClaimDiagnosisCode", "ClaimDiagnosisCode4")
                        .WithMany()
                        .HasForeignKey("DiagnosisCodePointer4");

                    b.HasOne("HC.Patient.Entity.Location", "Location1")
                        .WithMany()
                        .HasForeignKey("OfficeAddressID");

                    b.HasOne("HC.Patient.Entity.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressID");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs2")
                        .WithMany()
                        .HasForeignKey("RenderingProviderId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ClaimServiceLinePaymentDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim835ServiceLine", "Claim835ServiceLine")
                        .WithMany()
                        .HasForeignKey("Claim835ServiceLineId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterPaymentDescription", "MasterPaymentDescription")
                        .WithMany()
                        .HasForeignKey("DescriptionType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientGuardian", "PatientGuardian")
                        .WithMany()
                        .HasForeignKey("GuarantorId");

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId");

                    b.HasOne("HC.Patient.Entity.PaymentCheckDetail", "PaymentCheckDetail")
                        .WithMany()
                        .HasForeignKey("PaymentCheckDetailId");

                    b.HasOne("HC.Patient.Entity.MasterPaymentType", "MasterPaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.ClaimServiceLine", "ClaimServiceLine")
                        .WithMany()
                        .HasForeignKey("ServiceLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Category", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_CategoryCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.DFA_Category", "DFA_Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Document", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_DocumentAnswer", b =>
                {
                    b.HasOne("HC.Patient.Entity.DFA_CategoryCode", "DFA_CategoryCode")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.DFA_Document", "DFA_Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.DFA_SectionItem", "DFA_SectionItem")
                        .WithMany()
                        .HasForeignKey("SectionItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_PatientDocuments", b =>
                {
                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.DFA_Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_Section", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.DFA_Document", "DFA_Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.DFA_SectionItem", b =>
                {
                    b.HasOne("HC.Patient.Entity.DFA_Category", "DFA_Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.DFA_CategoryCode", "DFA_CategoryCode")
                        .WithMany()
                        .HasForeignKey("Itemtype")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.DFA_Section", "DFA_Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EDI999AcknowledgementMaster", b =>
                {
                    b.HasOne("HC.Patient.Entity.Claim837Batch", "Claim837Batch")
                        .WithMany()
                        .HasForeignKey("Claim837BatchId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.EligibilityEnquiry270Master", "EligibilityEnquiry270Master")
                        .WithMany()
                        .HasForeignKey("EligibilityEnquiry270MasterId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EDIGateway", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270Master", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterEligibilityEnquiryStatus", "MasterEligibilityEnquiryStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270ServiceCodesDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.EligibilityEnquiry270Master", "EligibilityEnquiry270Master")
                        .WithMany()
                        .HasForeignKey("EligibilityEnquiry270MasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterServiceCode")
                        .WithMany()
                        .HasForeignKey("ServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiry270ServiceTypeDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.EligibilityEnquiry270Master", "EligibilityEnquiry270Master")
                        .WithMany()
                        .HasForeignKey("EligibilityEnquiry270MasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.EligibilityEnquiryServiceTypeMaster", "EligibilityEnquiryServiceTypeMaster")
                        .WithMany()
                        .HasForeignKey("EligibilityEnquiryServiceTypeMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EligibilityEnquiryServiceTypeMaster", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailLog", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailTemplate", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterEmailType", "MasterEmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EmailTemplates", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCodeForTemplateType")
                        .WithMany()
                        .HasForeignKey("ModuleTypeId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.EncounterSignature", b =>
                {
                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("HC.Patient.Entity.Event", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.GlobalCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCodeCategory", "GlobalCodeCategory")
                        .WithMany()
                        .HasForeignKey("GlobalCodeCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithOne()
                        .HasForeignKey("HC.Patient.Entity.GlobalCode", "OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.GlobalCodeCategory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.GroupSessionInvitations", b =>
                {
                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientAppointment", "InvitedPatientAppointment")
                        .WithMany()
                        .HasForeignKey("InvitedAppointmentId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("HC.Patient.Entity.TelehealthSessionDetails", "TelehealthSessionDetails")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("HC.Patient.Entity.HealthcareKeywords", b =>
                {
                    b.HasOne("HC.Patient.Entity.ProviderCareCategory", "ProviderCareCategory")
                        .WithMany()
                        .HasForeignKey("CareCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Holidays", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.InsuranceCompanies", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterInsuranceType", "InsuranceType")
                        .WithMany()
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.InsuredPerson", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterGender", "MasterGender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("InsuredPerson")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithOne("InsuredPerson")
                        .HasForeignKey("HC.Patient.Entity.InsuredPerson", "PatientInsuranceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRelationship", "MasterRelationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.InvitationRejectLog", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.UserInvitation", "UserInvitation")
                        .WithMany()
                        .HasForeignKey("InvitationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Location", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocations")
                        .WithMany()
                        .HasForeignKey("FacilityCode");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MachineLoginLog", b =>
                {
                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAdjustmentGroupCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAdministrationSite", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterAllergies", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCity", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterClaimStatus", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterClaimStatusCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCountry", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithOne()
                        .HasForeignKey("HC.Patient.Entity.MasterCountry", "OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterCustomLabels", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("CustomLabelTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoleType", "UserRoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDegree", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDiscipline", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDocumentTypes", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterDocumentTypesStaff", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEligibilityEnquiryStatus", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEmailType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterEthnicity", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterGender", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterICD", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterImmunityStatus", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterImmunization", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterInsuranceType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterLabs", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterLonic", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterManufacture", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterModifiers", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNoteType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNotificationActionType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterNotificationType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPatientLocation", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPaymentDescription", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPaymentType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPayrollBreakTime", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPayrollGroup", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPharmacy", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCity", "MasterCity")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterPreferredLanguage", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterProgram", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRace", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterReaction", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterReferral", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRejectionReason", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRelationship", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRoundingRules", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterRouteOfAdministration", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServiceCode", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRoundingRules", "MasterRoundingRules")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterUnitType", "MasterUnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServiceCodeModifiers", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterServiceCode")
                        .WithMany("MasterServiceCodeModifiers")
                        .HasForeignKey("ServiceCodeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterServices", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterState", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithOne()
                        .HasForeignKey("HC.Patient.Entity.MasterState", "OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTags", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoleType", "UserRoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplateCategory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplates", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterTemplateCategory", "MasterTemplateCategory")
                        .WithMany()
                        .HasForeignKey("TemplateCategoryId");

                    b.HasOne("HC.Patient.Entity.MasterTemplateSubCategory", "MasterTemplateSubCategory")
                        .WithMany()
                        .HasForeignKey("TemplateSubCategoryId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterTemplateSubCategory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterTemplateCategory", "MasterTemplateCategory")
                        .WithMany()
                        .HasForeignKey("MasterTemplateCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterUnitType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterVFCEligibility", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MasterWeekDays", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.MenuPermissions", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Message", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany("Messages")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Message")
                        .WithMany("Messages")
                        .HasForeignKey("ParentMessageId");
                });

            modelBuilder.Entity("HC.Patient.Entity.MessageDocuments", b =>
                {
                    b.HasOne("HC.Patient.Entity.Message", "Message")
                        .WithMany("MessageDocuments")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.MessageRecepient", b =>
                {
                    b.HasOne("HC.Patient.Entity.Message", "Message")
                        .WithMany("MessageRecepients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithMany("MessageRecepients")
                        .HasForeignKey("ToUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.ModulePermissions", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Modules", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Modules", b =>
                {
                    b.HasOne("HC.Patient.Entity.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID");
                });

            modelBuilder.Entity("HC.Patient.Entity.Notifications", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterNotificationActionType", "MasterNotificationActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("PatientAppointmentId");

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.NotificationTypeMapping", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Notifications", "Notifications")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterNotificationType", "MasterNotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.OpenTokSettings", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Organization", b =>
                {
                    b.HasOne("HC.Patient.Entity.GlobalCode", "MasterMaritalStatus")
                        .WithMany()
                        .HasForeignKey("ContactPersonMaritalStatus");

                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID");
                });

            modelBuilder.Entity("HC.Patient.Entity.OrganizationSMTPDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.OrganizationSubscriptionPlan", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAddress", b =>
                {
                    b.HasOne("HC.Patient.Entity.GlobalCode", "MasterAddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeID");

                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientAddress")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation")
                        .WithMany()
                        .HasForeignKey("PatientLocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAllergies", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterAllergies", "MasterAllergies")
                        .WithMany()
                        .HasForeignKey("AllergyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterReaction", "MasterReaction")
                        .WithMany()
                        .HasForeignKey("ReactionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientAppointment", b =>
                {
                    b.HasOne("HC.Patient.Entity.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeID");

                    b.HasOne("HC.Patient.Entity.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "CancelType")
                        .WithMany()
                        .HasForeignKey("CancelTypeId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation")
                        .WithMany()
                        .HasForeignKey("CustomAddressID");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Location", "Location1")
                        .WithMany()
                        .HasForeignKey("OfficeAddressID");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressID");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientAppointment")
                        .HasForeignKey("PatientID");

                    b.HasOne("HC.Patient.Entity.PatientInsuranceDetails", "PatientInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("PatientInsuranceId");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("ServiceLocationID");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientCustomLabels", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterCustomLabels", "MasterCustomLabels")
                        .WithMany()
                        .HasForeignKey("CustomLabelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany("PatientCustomLabels")
                        .HasForeignKey("PatientID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientDiagnosis", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterICD", "MasterICD")
                        .WithMany()
                        .HasForeignKey("ICDID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounter", b =>
                {
                    b.HasOne("HC.Patient.Entity.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation1")
                        .WithMany()
                        .HasForeignKey("CustomAddressID");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterPatientLocation", "MasterPatientLocation")
                        .WithMany()
                        .HasForeignKey("MasterPatientLocationId");

                    b.HasOne("HC.Patient.Entity.MasterNoteType", "MasterNoteType")
                        .WithMany()
                        .HasForeignKey("NotetypeId");

                    b.HasOne("HC.Patient.Entity.Location", "Location1")
                        .WithMany()
                        .HasForeignKey("OfficeAddressID");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressID");

                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany("PatientEncounter")
                        .HasForeignKey("PatientAppointmentId");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("ServiceLocationID");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterCodesMapping", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientEncounterDiagnosisCodes", "PatientEncounterDiagnosisCodes")
                        .WithMany()
                        .HasForeignKey("PatientEncounterDiagnosisCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientEncounterServiceCodes", "PatientEncounterServiceCodes")
                        .WithMany()
                        .HasForeignKey("PatientEncounterServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterDiagnosisCodes", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterICD", "MasterICD")
                        .WithMany()
                        .HasForeignKey("ICDCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterServiceCodes", b =>
                {
                    b.HasOne("HC.Patient.Entity.AuthProcedureCPT", "AuthProcedureCPT")
                        .WithMany()
                        .HasForeignKey("AuthProcedureCPTLinkId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers1")
                        .WithMany()
                        .HasForeignKey("Modifier1");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers2")
                        .WithMany()
                        .HasForeignKey("Modifier2");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers3")
                        .WithMany()
                        .HasForeignKey("Modifier3");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers4")
                        .WithMany()
                        .HasForeignKey("Modifier4");

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterServiceCode")
                        .WithMany()
                        .HasForeignKey("ServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientEncounterTemplates", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterTemplates", "MasterTemplates")
                        .WithMany()
                        .HasForeignKey("MasterTemplateId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientGuardian", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("GuardianState");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientGuardian")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRelationship", "MasterRelationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientImmunization", b =>
                {
                    b.HasOne("HC.Patient.Entity.Staffs", "Staff1")
                        .WithMany()
                        .HasForeignKey("AdministeredBy");

                    b.HasOne("HC.Patient.Entity.MasterAdministrationSite", "MasterAdministrationSite")
                        .WithMany()
                        .HasForeignKey("AdministrationSiteID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterImmunityStatus", "MasterImmunityStatus")
                        .WithMany()
                        .HasForeignKey("ImmunityStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterImmunization", "MasterImmunization")
                        .WithMany()
                        .HasForeignKey("Immunization")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterManufacture", "MasterManufacture")
                        .WithMany()
                        .HasForeignKey("ManufactureID");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("OrderBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRejectionReason", "MasterRejectionReason")
                        .WithMany()
                        .HasForeignKey("RejectionReasonID");

                    b.HasOne("HC.Patient.Entity.MasterRouteOfAdministration", "MasterRouteOfAdministration")
                        .WithMany()
                        .HasForeignKey("RouteOfAdministrationID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.MasterVFCEligibility", "MasterVFCEligibility")
                        .WithMany()
                        .HasForeignKey("VFCID");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientInsuranceDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.InsuranceCompanies", "InsuranceCompanies")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientInsuranceDetails")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientLabTest", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterLonic", "MasterLonic")
                        .WithMany()
                        .HasForeignKey("LoincCodeID");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientLabTest")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedicalFamilyHistory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterGender", "MasterGender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientMedicalFamilyHistory")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRelationship", "MasterRelationship")
                        .WithMany()
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedicalFamilyHistoryDiseases", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterICD", "MasterICD")
                        .WithMany()
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientMedicalFamilyHistory", "PatientMedicalFamilyHistory")
                        .WithMany("PatientMedicalFamilyHistoryDiseases")
                        .HasForeignKey("MedicalFamilyHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientMedication", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyID");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientMedication")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientPrescription", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PrescriptionDrugs", "Prescription")
                        .WithMany()
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyID");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Patients", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("Citizenship");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterRelationship", "RelationShip")
                        .WithMany()
                        .HasForeignKey("EmergencyContactRelationship");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentID");

                    b.HasOne("HC.Patient.Entity.MasterEthnicity", "MasterEthnicity")
                        .WithMany()
                        .HasForeignKey("Ethnicity");

                    b.HasOne("HC.Patient.Entity.MasterGender", "MasterGender")
                        .WithMany()
                        .HasForeignKey("Gender")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "MasterMaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatus");

                    b.HasOne("HC.Patient.Entity.MasterRace", "MasterRace")
                        .WithMany()
                        .HasForeignKey("Race");

                    b.HasOne("HC.Patient.Entity.MasterRace", "SecondaryRace")
                        .WithMany()
                        .HasForeignKey("SecondaryRaceID");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users3")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientSocialHistory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientTags", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientTags")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterTags", "MasterTags")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PatientVitals", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PatientVitals")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerAppointmentTypes", b =>
                {
                    b.HasOne("HC.Patient.Entity.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers1")
                        .WithMany()
                        .HasForeignKey("Modifier1");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers2")
                        .WithMany()
                        .HasForeignKey("Modifier2");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers3")
                        .WithMany()
                        .HasForeignKey("Modifier3");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodeModifiers", "PayerServiceCodeModifiers4")
                        .WithMany()
                        .HasForeignKey("Modifier4");

                    b.HasOne("HC.Patient.Entity.InsuranceCompanies", "InsuranceCompanies")
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PayerServiceCodes", "PayerServiceCodes")
                        .WithMany()
                        .HasForeignKey("PayerServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerServiceCodeModifiers", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PayerServiceCodes", "PayerServiceCodes")
                        .WithMany("PayerServiceCodeModifiers")
                        .HasForeignKey("PayerServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayerServiceCodes", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.InsuranceCompanies", "InsuranceCompanies")
                        .WithMany()
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterRoundingRules", "MasterRoundingRules")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterServiceCode", "MasterServiceCode")
                        .WithMany()
                        .HasForeignKey("ServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterUnitType", "MasterUnitType")
                        .WithMany()
                        .HasForeignKey("UnitType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PaymentCheckDetail", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientGuardian", "PatientGuardian")
                        .WithMany()
                        .HasForeignKey("GuarantorId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HC.Patient.Entity.InsuranceCompanies", "InsuranceCompanies")
                        .WithMany()
                        .HasForeignKey("PayerId");

                    b.HasOne("HC.Patient.Entity.MasterPaymentType", "MasterPaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollBreakTime", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollBreakTimeDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PayrollBreakTime", "PayrollBreakTime")
                        .WithMany()
                        .HasForeignKey("PayrollBreakTimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.PayrollGroup", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "PayPeriod")
                        .WithMany()
                        .HasForeignKey("PayPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PayrollBreakTime", "PayrollBreakTime")
                        .WithMany()
                        .HasForeignKey("PayrollBreakTimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "WorkWeek")
                        .WithMany()
                        .HasForeignKey("WorkWeekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.PhoneNumbers", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PatientID");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "Preferences")
                        .WithMany()
                        .HasForeignKey("PreferenceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ProviderCareCategory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ReviewRatings", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientAppointment", "PatientAppointment")
                        .WithMany()
                        .HasForeignKey("PatientAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.RolePermission", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Modules", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.RoundingRuleDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterRoundingRules", "MasterRoundingRules")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.ScreenPermissions", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Modules", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Screens", "Screens")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Screens", b =>
                {
                    b.HasOne("HC.Patient.Entity.Modules", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.SecurityQuestions", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.SoapNotes", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffAvailability", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterWeekDays", "MasterWeekDays")
                        .WithMany("StaffAvailability")
                        .HasForeignKey("DayId");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "StaffAvailabilityType")
                        .WithMany()
                        .HasForeignKey("StaffAvailabilityTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffAvailability")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffAward", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany("StaffAwards")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffCareCategories", b =>
                {
                    b.HasOne("HC.Patient.Entity.ProviderCareCategory", "ProviderCareCategory")
                        .WithMany()
                        .HasForeignKey("CareCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffCareCategories")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffCustomLabels", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterCustomLabels", "MasterCustomLabels")
                        .WithMany()
                        .HasForeignKey("CustomLabelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffExperience", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffLeave", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "LeaveReasonType")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "LeaveStatus")
                        .WithMany()
                        .HasForeignKey("LeaveStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffLocation", b =>
                {
                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffLocation")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffPayrollRateForActivity", b =>
                {
                    b.HasOne("HC.Patient.Entity.AppointmentType", "AppointmentType")
                        .WithMany("StaffPayrollRateForActivity")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffPayrollRateForActivity")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffQualification", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staff")
                        .WithMany("StaffQualifications")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.Staffs", b =>
                {
                    b.HasOne("HC.Patient.Entity.MasterCountry", "MasterCountry")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.MasterDegree", "MasterDegree")
                        .WithMany()
                        .HasForeignKey("DegreeID");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeID");

                    b.HasOne("HC.Patient.Entity.MasterGender", "MasterGender")
                        .WithMany()
                        .HasForeignKey("Gender");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PayrollGroup", "PayrollGroup")
                        .WithMany()
                        .HasForeignKey("PayrollGroupID");

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterState", "MasterState")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users3")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffServices", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterServices", "MasterServices")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffServices")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffSpeciality", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("GlobalCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffSpecialities")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTags", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffTags")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.MasterTags", "MasterTags")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTaxonomy", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GlobalCode", "GlobalCode")
                        .WithMany()
                        .HasForeignKey("GlobalCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffTaxonomies")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.StaffTeam", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany("StaffTeam")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Staffs", "StaffTeamGroup")
                        .WithMany()
                        .HasForeignKey("StaffTeamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthRecordingDetail", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("HC.Patient.Entity.TelehealthSessionDetails", "TelehealthSessionDetails")
                        .WithMany()
                        .HasForeignKey("TelehealthSessionDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthSessionDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("HC.Patient.Entity.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.TelehealthTokenDetails", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.GroupSessionInvitations", "GroupSessionInvitations")
                        .WithMany()
                        .HasForeignKey("InvitationId");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("HC.Patient.Entity.TelehealthSessionDetails", "TelehealthSessionDetails")
                        .WithMany()
                        .HasForeignKey("TelehealthSessionDetailID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.User", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "User1")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.UserDocuments", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.MasterDocumentTypes", "MasterDocumentTypes")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("HC.Patient.Entity.MasterDocumentTypesStaff", "MasterDocumentTypesStaff")
                        .WithMany()
                        .HasForeignKey("DocumentTypeIdStaff");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.UserFavourites", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.UserInvitation", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserPasswordHistory", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.UserRoles", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("DeletedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserRoleType", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserSecurityQuestionAnswer", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("HC.Patient.Entity.SecurityQuestions", "SecurityQuestions")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users3")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HC.Patient.Entity.UserSpeciality", b =>
                {
                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffsId");

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("HC.Patient.Entity.UserTimesheetByAppointmentType", b =>
                {
                    b.HasOne("HC.Patient.Entity.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId");

                    b.HasOne("HC.Patient.Entity.User", "Users")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("HC.Patient.Entity.User", "Users2")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("HC.Patient.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.PatientEncounter", "PatientEncounter")
                        .WithMany()
                        .HasForeignKey("PatientEncounterId");

                    b.HasOne("HC.Patient.Entity.Staffs", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.GlobalCode", "TimesheetStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HC.Patient.Entity.User", "Users1")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
